syntax = "v1"

info (
	title: "im消息服务"
	author: "zxm"
)

// ------- domain.api --------------------

type (
	ChatLog {
		Id             string `json:"id,omitempty"`
		ConversationId string `json:"conversationId,omitempty"`
		SendId         string `json:"sendId,omitempty"`
		RecvId         string `json:"recvId,omitempty"`
		MsgType        int32  `json:"msgType,omitempty"`
		MsgContent     string `json:"msgContent,omitempty"`
		ChatType       int32  `json:"chatType,omitempty"`
		SendTime       int64  `json:"SendTime,omitempty"`
	}

	Conversation {
		ConversationId string `json:"conversationId,omitempty"`
		ChatType       int32  `json:"ChatType,omitempty"`
		IsShow         bool   `json:"isShow,omitempty"`
		Seq            int64  `json:"seq,omitempty"`
		Read           int32  `json:"read,omitempty"`
	}
)

// -------------- im api v1 --------------

type (
	ChatLogReq {
		MsgId          string `json:"msgId"`
		ConversationId string `json:"conversationId"`
		StartSendTime  int64  `json:"startSendTime,omitempty"`
		EndSendTime    int64  `json:"endSendTime,omitempty"`
		Count          int64  `json:"count,omitempty"`
	}
	ChatLogResp {
		List []*ChatLog `json:"list"`
	}

	GetConversationsReq  struct{}
	GetConversationsResp {
		ConversationList map[string]*Conversation `json:"conversationList"`
	}

	PutConversationsReq {
		ConversationList map[string]*Conversation `json:"conversationList"`
	}
	PutConversationsResp struct{}

	SetUpUserConversationReq {
		SendId   string `json:"sendId,omitempty"`
		RecvId   string `json:"recvId,omitempty"`
		ChatType int32  `json:"ChatType,omitempty"`
	}
	setUpUserConversationResp struct{}

	GetChatLogReadRecordsReq {
		MsgId string `json:"msgId"`
	}
	GetChatLogReadRecordsResp {
		Reads   []string `json:"reads"`
		UnReads []string `json:"unReads"`
	}
)

@server(
	prefix: v1/im
	jwt: JwtAuth
)
service im {
	@doc "根据用户获取聊天记录"
	@handler getChatLog
	get /chatlog(ChatLogReq) returns(ChatLogResp)

	@handler getChatLogReadRecords
	get /chatlog/readRecords(GetChatLogReadRecordsReq) returns(GetChatLogReadRecordsResp)

	@doc "建立会话"
	@handler setUpUserConversation
	post /setup/conversation(SetUpUserConversationReq) returns(setUpUserConversationResp)

	@doc "获取会话"
	@handler getConversations
	get /conversation(GetConversationsReq) returns(GetConversationsResp)

	@doc "更新会话"
	@handler putConversations
	put /conversation(PutConversationsReq) returns(PutConversationsResp)
}